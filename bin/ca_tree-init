#!/bin/bash
rm -fr /dev/shm/certificate.*

# for testing:

if [ ${EUID} -eq 0 ]; then
    ROOT_CA_KEYSIZE=8192
    MID_CA_KEYSIZE=4096
    HOST_KEYSIZE=2048
    CA_TREE_TRUNK="/var/lib/pkild/certificate_authority"
    WEB_ROOT="/var/www"
    VAULT_DIR="/etc/vault"
    SSL_ROOT="/etc/ssl"
else
    BASE=$(mktemp -d /var/tmp/ca_tree-init.XXXXX)
    ROOT_CA_KEYSIZE=1024
    MID_CA_KEYSIZE=512
    HOST_KEYSIZE=512
    CA_TREE_TRUNK="${BASE}/certificate_authority"
    VAULT_DIR="${BASE}/vault"
    WEB_ROOT="${BASE}/www"
    SSL_ROOT="${BASE}/ssl"
fi
###################################################################
# Requires: gpg-init, secret-init, rotate-secret
# dpkg: dns-browse openssl gpg
###################################################################
export PATH="/usr/sbin:/usr/local/sbin:/sbin:/usr/local/bin:/usr/bin:/bin"
DOMAIN=$(dnsdomainname)

if [ -f /usr/local/sbin/gpg-init ];then /usr/local/sbin/gpg-init;fi

# install our prerequisites
for elf in `echo "dig openssl gpg"`; do 
    if [ -z $(which ${elf}) ];then 
        echo "${elf} not found. Aborting...";
        exit -1
    fi    
done

# abort if the trunk is already in place
if [ -d ${CA_TREE_TRUNK}/root-ca.${DOMAIN}/mid-ca.${DOMAIN} ];then 
    echo "I've already got a pki infrastructure... Aborting"
    exit 0;
fi

###################################################################
# These need to be set up in DNS (and this should be documented)
###################################################################
DOMAIN="$(dnsdomainname)"
CA_COUNTRY=$(dig +short -t txt ca-country.${DOMAIN}|sed -e's/"//g')
CA_STATE=$(dig +short -t txt ca-state.${DOMAIN}|sed -e's/"//g')
CA_LOCALITY=$(dig +short -t txt ca-locality.${DOMAIN}|sed -e's/"//g')
CA_ORG=$(dig +short -t txt ca-org.${DOMAIN}|sed -e's/"//g')
CA_ORGUNIT=$(dig +short -t txt ca-orgunit.${DOMAIN}|sed -e's/"//g')
CA_EMAIL=$(dig +short -t txt ca-email.${DOMAIN}|sed -e's/"//g')
CA_CRL=$(dig +short -t txt ca-crl.${DOMAIN}|sed -e's/"//g')

###################################################################
# These as well, we will use them to pack up the private keys...
###################################################################
PGP_KEYSERVER=$(dig +short -t txt pgp-keyserver.${DOMAIN}|sed -e's/"//g')
PGP_KEYID=$(dig +short -t txt pgp-keyid.${DOMAIN}|sed -e's/"//g')

if [ -z "${SECRET}" ]; then  SECRET=$(/usr/local/sbin/secret); fi
if [ -z "${SECRET}" ]; then 
    echo "please set SECRET"
    exit 1;
fi
gpg --list-keys | grep -q "^pub.*${PGP_KEYID}" || \
    gpg --keyserver ${PGP_KEYSERVER} --recv-keys ${PGP_KEYID}
echo -e "y\n${SECRET}\n"|gpg --command-fd 0 --status-fd 2 \
                             --lsign-key ${PGP_KEYID} 
echo -e "trust\n5\ny\n"|gpg --command-fd 0 --status-fd 2 --edit-key ${PGP_KEYID}

###################################################################
# We use the same secret for everything that we do on a system.
###################################################################
WORKDIR=$(mktemp -d /dev/shm/certificate.XXXXX)

###################################################################
# OpenSSL configuration Template
###################################################################
cat<<EOTPL > ${WORKDIR}/openssl.tpl
HOME                    = .
RANDFILE                = \$ENV::HOME/.rnd
DOMAIN                  = ${DOMAIN}
ca-domain               = ~LEVEL~.${DOMAIN}

[ ca ]
default_ca      = CA_default            # The default ca section
[ CA_default ]
dir             = .
certs           = \$dir/certs
crl_dir         = \$dir/crl
database        = \$dir/index.txt
new_certs_dir   = \$dir/newcerts
certificate     = \$dir/~LEVEL~.\${DOMAIN}.pem
serial          = \$dir/serial
crlnumber       = \$dir/crlnumber
crl             = \$dir/crl.\${DOMAIN}.pem
private_key     = \$dir/private/~LEVEL~.\${DOMAIN}.key
RANDFILE        = \$dir/private/.rand
x509_extensions = usr_cert
name_opt        = ca_default
cert_opt        = ca_default
default_days    = ~DAYS~
default_crl_days= ~DAYS~
default_md      = sha1
preserve        = no
policy          = policy_match

[ policy_match ]
countryName             = match
stateOrProvinceName     = match
localityName            = match
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ policy_anything ]
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ req ]
default_bits            = 1024
default_keyfile         = \${DOMAIN}.pem
distinguished_name      = req_distinguished_name
attributes              = req_attributes
x509_extensions = v3_ca

[ req_distinguished_name ]
countryName                     = Country Name (2 letter code)
countryName_default             = ${CA_COUNTRY}
countryName_min                 = 2
countryName_max                 = 2
stateOrProvinceName             = State or Province Name (full name)
stateOrProvinceName_default     = ${CA_STATE}
localityName                    = Locality Name (eg, city)
localityName_default            = ${CA_LOCALITY}
0.organizationName              = Organization Name (eg, company)
0.organizationName_default      = ${CA_ORG}
organizationalUnitName          = Organizational Unit Name (eg, section)
organizationalUnitName_default  = ~TEXTLEVEL~
commonName                      = Common Name (eg, YOUR name)
commonName_max                  = 64
commonName_default              = ~LEVEL~.\${DOMAIN}
emailAddress                    = Email Address
emailAddress_max                = 64
emailAddress_default            = ~EMAIL~

[ req_attributes ]
challengePassword               = A challenge password
challengePassword_min           = 4
challengePassword_max           = 20

[ usr_cert ]
basicConstraints=CA:FALSE
nsComment                       = "OpenSSL Generated Certificate"
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid,issuer
nsCaRevocationUrl               = ${CA_CRL}

[ v3_req ]
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
nsCaRevocationUrl               = ${CA_CRL}

[ v3_ca ]
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer:always
basicConstraints = CA:true
nsCaRevocationUrl               = ${CA_CRL}

EOTPL

###################################################################
# Create the Root Certificate Authority
###################################################################
ROOT_CA="${WORKDIR}/root-ca.${DOMAIN}"
if [ ! -d ${ROOT_CA} ];then mkdir -p ${ROOT_CA};fi
echo "01" > ${ROOT_CA}/serial
cp /dev/null ${ROOT_CA}/index.txt
for dir in `echo "certs crl newcerts private"`;do
    if [ ! -d ${ROOT_CA}/${dir} ];then
        mkdir ${ROOT_CA}/${dir}
    fi
done
sed -e 's/~LEVEL~/root-ca/g' \
    -e 's/~TEXTLEVEL~/Root Certificate Authority/g' \
    -e 's/~EMAIL~/certificate.authority@${DOMAIN}/g' \
    -e 's/~DAYS~/3650/g' \
    ${WORKDIR}/openssl.tpl > ${ROOT_CA}/openssl.cnf
# root ca
echo ${SECRET} | openssl genrsa -des3 -passout fd:0 \
                                -out ${ROOT_CA}/private/root-ca.${DOMAIN}.key ${ROOT_CA_KEYSIZE}
echo ${SECRET} | openssl req -new -x509 -nodes -sha1 \
                             -days 3650 -passin fd:0 \
                             -key ${ROOT_CA}/private/root-ca.${DOMAIN}.key \
                             -out ${ROOT_CA}/root-ca.${DOMAIN}.pem \
                             -config ${ROOT_CA}/openssl.cnf -batch

###################################################################
# Create the Intermediate Certificate Authority
###################################################################
MID_CA="${WORKDIR}/mid-ca.$(dnsdomainname)"
if [ ! -d ${MID_CA} ];then mkdir -p ${MID_CA};fi
echo "01" > ${MID_CA}/serial
cp /dev/null ${MID_CA}/index.txt
for dir in `echo "certs crl newcerts private"`;do
    if [ ! -d ${MID_CA}/${dir} ];then
        mkdir ${MID_CA}/${dir}
    fi
done
sed -e 's/~LEVEL~/mid-ca/g' \
    -e 's/~TEXTLEVEL~/Intermediate Certificate Authority/g' \
    -e 's/~EMAIL~/certificate.authority@${DOMAIN}/g' \
    -e 's/~DAYS~/1825/g' \
    ${WORKDIR}/openssl.tpl > ${MID_CA}/openssl.cnf

# mid ca
cd ${MID_CA}
echo "${SECRET}" | openssl genrsa -des3 -passout fd:0 \
                                  -out ${MID_CA}/private/mid-ca.${DOMAIN}.key ${MID_CA_KEYSIZE}
echo "${SECRET}" | openssl req -new -sha1 -days 1825 -passin fd:0 \
                               -key ${MID_CA}/private/mid-ca.${DOMAIN}.key \
                               -out ${MID_CA}/mid-ca.${DOMAIN}.csr \
                               -config ${MID_CA}/openssl.cnf -batch

###################################################################
# sign the Intermediate CA with the Root CA
###################################################################
mv ${MID_CA}/mid-ca.${DOMAIN}.csr ${ROOT_CA}

cd ${ROOT_CA}
echo "${SECRET}" | openssl ca -extensions v3_ca -days 1825 \
                              -passin fd:0 \
                              -out ${ROOT_CA}/mid-ca.${DOMAIN}.crt \
                              -in ${ROOT_CA}/mid-ca.${DOMAIN}.csr \
                              -config ${ROOT_CA}/openssl.cnf -batch

cat ${MID_CA}/mid-ca.${DOMAIN}.pem ${ROOT_CA}/root-ca.${DOMAIN}.pem > ${MID_CA}/ca_trust_chain.crt
mv ${ROOT_CA}/mid-ca.${DOMAIN}.crt ${MID_CA}/mid-ca.${DOMAIN}.pem
mv ${ROOT_CA}/mid-ca.${DOMAIN}.csr ${MID_CA}/mid-ca.${DOMAIN}.csr

###################################################################
# Create the Domain Certificate Authority for $(dnsdomainname)
###################################################################
DOM_CA="${WORKDIR}/$(dnsdomainname)"
if [ ! -d ${DOM_CA} ];then mkdir -p ${DOM_CA};fi
echo "01" > ${DOM_CA}/serial
cp /dev/null ${DOM_CA}/index.txt
for dir in `echo "certs crl newcerts private"`;do
    if [ ! -d ${DOM_CA}/${dir} ];then
        mkdir ${DOM_CA}/${dir}
    fi
done
sed -e 's/~LEVEL~.//g' \
    -e "s/~TEXTLEVEL~/$(dnsdomainname)/g" \
    -e 's/~EMAIL~/certificate.authority@${DOMAIN}/g' \
    -e 's/~DAYS~/1095/g' \
    ${WORKDIR}/openssl.tpl > ${DOM_CA}/openssl.cnf

# domain ca
cd ${DOM_CA}

# the domain ca key doesn't get a passphrase:
openssl genrsa -out ${DOM_CA}/private/${DOMAIN}.key ${DOM_CA_KEYSIZE}
echo "${SECRET}" | openssl req -new -sha1 -days 1095 -passin fd:0 \
                               -key ${DOM_CA}/private/${DOMAIN}.key \
                               -out ${DOM_CA}/${DOMAIN}.csr \
                               -config ${DOM_CA}/openssl.cnf -batch

###################################################################
# sign the Domain CA with the Intermediate CA
###################################################################
mv ${DOM_CA}/${DOMAIN}.csr ${MID_CA}

cd ${MID_CA}
echo "${SECRET}" | openssl ca -extensions v3_ca -days 1825 \
                              -passin fd:0 \
                              -out ${MID_CA}/${DOMAIN}.crt \
                              -in ${MID_CA}/${DOMAIN}.csr \
                              -config ${MID_CA}/openssl.cnf -batch

mv ${MID_CA}/${DOMAIN}.crt ${DOM_CA}/${DOMAIN}.pem
mv ${MID_CA}/${DOMAIN}.csr ${DOM_CA}/${DOMAIN}.csr

cat ${DOM_CA}/${DOMAIN}.pem ${MID_CA}/mid-ca.${DOMAIN}.pem \
    ${ROOT_CA}/root-ca.${DOMAIN}.pem > ${DOM_CA}/ca_trust_chain.crt

###################################################################
# Create Server Certificate for self
###################################################################
HNAME=$(hostname -s)
if [ -z ${HNAME} ];then
    echo "hostname -f doesn't return the hostname"
    exit
fi
MY_CERT="${WORKDIR}/${HNAME}.${DOMAIN}"
if [ ! -d ${MY_CERT} ];then mkdir -p ${MY_CERT};fi

sed -e "s/~LEVEL~/${HNAME}/g" \
    -e "s/~TEXTLEVEL~/${CA_ORGUNIT}/g" \
    -e "s/~EMAIL~/${CA_EMAIL}/g" \
    -e 's/~DAYS~/365/g' \
    ${WORKDIR}/openssl.tpl > ${MY_CERT}/openssl.cnf

echo ${SECRET} | openssl genrsa -des3 -passout fd:0 -out ${MY_CERT}/${HNAME}.${DOMAIN}.key ${HOST_KEYSIZE}
echo ${SECRET} | openssl req -new -key ${MY_CERT}/${HNAME}.${DOMAIN}.key \
                             -passin fd:0 \
                             -out ${MY_CERT}/${HNAME}.${DOMAIN}.csr \
                             -config ${MY_CERT}/openssl.cnf -batch

###################################################################
# Sign Server Certificate with Domain Cerificate Authority
###################################################################
mv ${MY_CERT}/${HNAME}.${DOMAIN}.csr ${DOM_CA}

# sign server cert with intermediate cert
cd ${DOM_CA}
openssl ca -config ${DOM_CA}/openssl.cnf \
           -policy policy_anything \
           -out ${DOM_CA}/${HNAME}.${DOMAIN}.crt \
           -batch \
           -infiles ${DOM_CA}/${HNAME}.${DOMAIN}.csr
mv ${DOM_CA}/${HNAME}.${DOMAIN}.crt ${MY_CERT}
mv ${DOM_CA}/${HNAME}.${DOMAIN}.csr ${MY_CERT}

###################################################################
# Pack Up the Certificate authorities into the vault.
###################################################################
if [ ! -d "${VAULT_DIR}" ];then 
   mkdir -p "${VAULT_DIR}"
   chmod 700 "${VAULT_DIR}"
fi

UMASK=$(umask)
umask 077
cd ${WORKDIR}

cp ${ROOT_CA}/ca_trust_chain.crt ${VAULT_DIR}
echo ${SECRET} | gpg -e -a -r ${PGP_KEYID} > ${VAULT_DIR}/passphrase.gpg
tar cvzf - root-ca.$(dnsdomainname)|gpg -e -a -r ${PGP_KEYID} > ${VAULT_DIR}/root-ca.$(dnsdomainname).gpg 
tar cvzf - mid-ca.$(dnsdomainname)|gpg -e -a -r ${PGP_KEYID} > ${VAULT_DIR}/mid-ca.$(dnsdomainname).gpg 
tar cvzf - $(dnsdomainname)|gpg -e -a -r ${PGP_KEYID} > ${VAULT_DIR}/$(dnsdomainname).gpg 
chmod 600 ${VAULT_DIR}/*

#############################################################################
# Install our Certificates into our root web directory and our /etc/ssl dir
#############################################################################
if [ ! -d ${WEB_ROOT} ];then mkdir ${WEB_ROOT};fi
if [ ! -d ${SSL_ROOT}/certs ]; then mkdir -p ${SSL_ROOT}/certs; fi
cp ${DOM_CA}/ca_trust_chain.crt ${WEB_ROOT}/${DOMAIN}_trustchain.crt
cp ${DOM_CA}/ca_trust_chain.crt ${SSL_ROOT}/certs/${DOMAIN}_trustchain.pem
cp ${MY_CERT}/${HNAME}.${DOMAIN}.crt ${SSL_ROOT}/certs/${HNAME}.${DOMAIN}.pem
chmod 755 ${WEB_ROOT}/${DOMAIN}_trustchain.crt \
          ${SSL_ROOT}/certs/${DOMAIN}_trustchain.pem \
          ${SSL_ROOT}/certs/${HNAME}.${DOMAIN}.pem

###########################################################################
# Install the host key in /etc/ssl/private (where other modules expect)
###########################################################################
if [ ! -d ${SSL_ROOT}/private ]; then mkdir -p ${SSL_ROOT}/private; fi
chmod 750 ${SSL_ROOT}/private
cp ${MY_CERT}/${HNAME}.${DOMAIN}.key ${SSL_ROOT}/private/${HNAME}.${DOMAIN}.cryptkey
echo "${SECRET}"| openssl rsa -in ${SSL_ROOT}/private/${HNAME}.${DOMAIN}.cryptkey \
                              -out ${SSL_ROOT}/private/${HNAME}.${DOMAIN}.clearkey -passin fd:0
(cd ${SSL_ROOT}/private; ln -s ${HNAME}.${DOMAIN}.clearkey ${HNAME}.${DOMAIN}.key)
chmod 440 ${SSL_ROOT}/private/${HNAME}.${DOMAIN}.key
chmod 440 ${SSL_ROOT}/private/${HNAME}.${DOMAIN}.clearkey
chmod 440 ${SSL_ROOT}/private/${HNAME}.${DOMAIN}.cryptkey

# we don't want it here anymore...
/bin/rm ${MY_CERT}/*.key

###########################################################################
# install them where pkild would like them to be...
###########################################################################
if [ ! -d ${CA_TREE_TRUNK} ];then 
    mkdir -p ${CA_TREE_TRUNK}
fi

cp -r ${MID_CA}  ${CA_TREE_TRUNK}
cp -r ${DOM_CA}  ${CA_TREE_TRUNK}/mid-ca.${DOMAIN}/
cp -r ${MY_CERT} ${CA_TREE_TRUNK}/mid-ca.${DOMAIN}/${DOMAIN}/certs/

find ${CA_TREE_TRUNK} -type d -exec chmod 750 {} \;
find ${CA_TREE_TRUNK} -type f -exec chmod 640 {} \;

(cd /etc/ssl/certs/; /usr/bin/c_rehash)

umask ${UMASK}
cd ~/
rm -fr ${WORKDIR}

if [ ${EUID} -eq 0 ]; then
    chown -R www-data:ssl-cert ${CA_TREE_TRUNK} 
    /etc/init.d/apache2 restart 
#else 
   # (cd ${BASE}; find .)
   # cat ${BASE}/certificate_authority/mid-ca.websages.com/websages.com/openssl.cnf
fi

exit 0;
