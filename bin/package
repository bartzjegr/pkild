#!/bin/bash
################################################################################
# To where we want to install the application
#
INSTALL_ROOT="/usr/share"
VERSION=0
RELEASE=1
PATCH=0
BUILD=$(echo "obase=16; ibase=10;$(date +'%s')"|bc)
################################################################################
# From this git repo, determine the package name and file list
#
SELF=$0
SELF_DIR=$(dirname $0);
SOURCE_ROOT=$(cd ${SELF_DIR}/..;pwd)
PACKAGE_NAME=$(basename ${SOURCE_ROOT})
SED_SOURCE_ROOT=$(echo ${SOURCE_ROOT} | sed -e 's/\//\\\//g')
SED_INSTALL_ROOT=$(echo ${INSTALL_ROOT} | sed -e 's/\//\\\//g')
################################################################################
# make a temporary fakeroot, and hardlink every file to it's corresponding file
#
if [ ! -d "${SOURCE_ROOT}/tmp" ]; then mkdir -p "${SOURCE_ROOT}/tmp";fi
TMPDIR=$(mktemp -d ${SOURCE_ROOT}/tmp/package.XXXX)

case "$1" in
    rpm)
        #rpm -qa | grep rpm-build || yum install -y rpm-build
        if [ ! -d "${TMPDIR}/${INSTALL_ROOT}/${PACKAGE_NAME}" ];then 
            mkdir -p "${TMPDIR}/${INSTALL_ROOT}/${PACKAGE_NAME}";
        fi
        rsync -avzPH \
              --link-dest ${SOURCE_ROOT}/ \
                          ${SOURCE_ROOT}/ \
                          ${TMPDIR}/${INSTALL_ROOT}/${PACKAGE_NAME}/ \
              --exclude "tmp" --exclude ".git"

        TARBALL="${PACKAGE_NAME}-${VERSION}.${RELEASE}.${PATCH}-${BUILD}.tar.gz"
        (cd ${TMPDIR}/${INSTALL_ROOT}/${PACKAGE_NAME}; tar cvzf /usr/src/redhat/SOURCES/${TARBALL} *)
        cat<<'        EOF' | sed -e "s/        //g" > /usr/src/redhat/SPECS/${PACKAGE_NAME}.spec
        Summary: A ajax based Private Key Infrastructure tool
        Name: ${PACKAGE_NAME}
        Version: ${VERSION}.${RELEASE}.${PATCH}
        Release: ${BUILD}
        Copyright: GPL
        Group: System/Management
        Source: ${PACKAGE_NAME}-${VERSION}.${RELEASE}.${PATCH}-${BUILD}.tar.gz
        BuildRoot: /var/tmp/%{name}-buildroot
        
        %description
        The eject program allows the user to eject removable media
        (typically CD-ROMs, floppy disks or Iomega Jaz or Zip disks)
        using software control. Eject can also control some multi-
        disk CD changers and even some devices' auto-eject features.
        
        Install eject if you'd like to eject removable media using
        software control.
        
        %prep
        %setup -q
        %patch -p1 -b .buildroot
        
        %build
        make RPM_OPT_FLAGS="$RPM_OPT_FLAGS"
        
        %install
        rm -rf $RPM_BUILD_ROOT
        mkdir -p $RPM_BUILD_ROOT/usr/bin
        mkdir -p $RPM_BUILD_ROOT/usr/man/man1
        
        install -s -m 755 eject $RPM_BUILD_ROOT/usr/bin/eject
        install -m 644 eject.1 $RPM_BUILD_ROOT/usr/man/man1/eject.1
        
        %clean
        rm -rf $RPM_BUILD_ROOT
        
        %files
        %defattr(-,root,root)
        %doc README TODO COPYING ChangeLog

        /usr/bin/eject
        /usr/man/man1/eject.1
        
        %changelog
        * Sun Mar 21 1999 Cristian Gafton <gafton@redhat.com> 
        - auto rebuild in the new build environment (release 3)
        EOF
    ;;
    "deb")
        if [ ! -d "${TMPDIR}/${PACKAGE_NAME}/DEBIAN" ];then 
            mkdir -p "${TMPDIR}/${PACKAGE_NAME}/DEBIAN"
        fi
        if [ ! -d "${TMPDIR}/${PACKAGE_NAME}/DATA/${INSTALL_ROOT}/${PACKAGE_NAME}" ];then 
            mkdir -p "${TMPDIR}/${PACKAGE_NAME}/DATA/${INSTALL_ROOT}/${PACKAGE_NAME}";
        fi
        echo "2.0" > "${TMPDIR}/${PACKAGE_NAME}/DEBIAN/debian-binary"
        rsync -avzPH \
              --link-dest ${SOURCE_ROOT}/ \
                          ${SOURCE_ROOT}/ \
                          ${TMPDIR}/${PACKAGE_NAME}/DATA/${INSTALL_ROOT}/${PACKAGE_NAME}/ \
              --exclude "tmp" --exclude ".git"
        (cd ${TMPDIR}; for d in `ls`; do find ${d} -type f -exec md5sum {} \; ;done) \
             > ${TMPDIR}/${PACKAGE_NAME}/DEBIAN/md5sums
        INSTALLED=$(du -ks "${TMPDIR}/${PACKAGE_NAME}/DATA" | awk '{print $1'})
        echo ${INSTALLED}
        
        #if [ ! -z ${prerm} ];then
        #    cp ${prerm} ${TMPDIR}/${PACKAGE_NAME}/DEBIAN/prerm
        #    chmod 755 ${TMPDIR}/${PACKAGE_NAME}/DEBIAN/prerm
        #fi
        #if [ ! -z ${postinst} ] ;then
        #    cp ${postinst} ${TMPDIR}/${PACKAGE_NAME}/DEBIAN/postinst
        #    chmod 755 ${TMPDIR}/${PACKAGE_NAME}/DEBIAN/postinst
        #fi
        
        cat<< '        EOF' | sed -e 's/^        //' >${TMPDIR}/${PACKAGE_NAME}/DEBIAN/control
        Package: ${PACKAGE_NAME}
        Version: ${version}
        Section: main
        Priority: optional
        Architecture: ${arch}
        Depends: ${pkglist}
        Installed-Size: ${INSTALLED}
        Maintainer: $(getent passwd ${LOGNAME}| awk -F: '{print $5}')
        Description: ${description}
         A packages with no files that Depends on $pkglist
        EOF

        if [ "${editcontro}" == "1" ]; then
            vi "${TMPDIR}/${PACKAGE_NAME}/DEBIAN/control"
        fi

        # Build the package
        #(cd ${TMPDIR}; dpkg --build ${PACKAGE_NAME})
        (cd ${TMPDIR}; dpkg-deb -b ${PACKAGE_NAME} ${PACKAGE_NAME}_${version}_${arch}.deb)
        (cd ${TMPDIR}; mv ${PACKAGE_NAME}_${version}_${arch}.deb ${WHEREIAM}/${PACKAGE_NAME}_${version}_${arch}.deb)
        
        if [ ! -z "${TMPDIR}" ]; then rm -fr "${TMPDIR}";fi
    ;;
    *) 
        echo "unknown or unsupoorted package format"
    ;;
esac
